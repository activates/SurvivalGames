package us.thetaco.survivalgames.file;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import org.bukkit.configuration.file.FileConfiguration;

import us.thetaco.survivalgames.SurvivalGames;
import us.thetaco.survivalgames.utils.Language;
import us.thetaco.survivalgames.utils.Values;

/** A class used for config management.. All variables will be loaded here, but stored in {@link us.thetaco.survivalgames.utils.Values} class
 * @author activates
 *
 */
public class ConfigHandler {

	// All options will be held in static variables under here
	
	
	private SurvivalGames plugin;
	public ConfigHandler(SurvivalGames plugin) {
		this.plugin = plugin;
	}
	
	public void initializeConfig() {
		
		File configLocation = new File(SurvivalGames.getPluginName() + "/config.yml");
		File configDirectory = new File(SurvivalGames.getPluginName());
		
		
		try {
			
			// checking if the config exists, and notifying the console that a new config file is going to be created
		
			if (!configLocation.exists()) {
				
				SurvivalGames.logger().logMessage(Language.NEW_CONFIG_GENERATED.toString());
				
				// create the directories, etc
				configDirectory.mkdir();
				configLocation.createNewFile();
				
			} else {
				// stopping here because.. There is no need to create a new config if one already exists
				
				// just loading the values
				this.loadValues(configLocation);
				
				return;
			}
			
			/*
		 	* Since we want to "customize" the config file, we will be writing it ourselves, then loading the values
		 	*/
			
			FileWriter fWriter = new FileWriter(configLocation);
			BufferedWriter writer = new BufferedWriter(fWriter);
			
			
			// now.. literally building the config file!
			
			writer.write("#                 )       \\   /      (");								writer.newLine();
			writer.write("#                /|\\      )\\_/(     /|\\");								writer.newLine();
			writer.write("#*              / | \\    (/\\|/\\)   / | \\                   *");	writer.newLine();
			writer.write("#|`.___________/__|__o____\\`|'/___o__|__\\________________.'|");		writer.newLine();
			writer.write("#|                  '^`    \\|/   '^`                       |");		writer.newLine();
			writer.write("#|                                                         |");		writer.newLine();
			writer.write("#|     This is an autogenerated config file for the        |");		writer.newLine();
			writer.write("#| SurvivalGames plugin! After editing the values in this  |");		writer.newLine();
			writer.write("#| file to your liking, be sure to restart your server to  |");		writer.newLine();
			writer.write("#|   finalize the changes you made. (Do not use /reload)   |");		writer.newLine();
			writer.write("#|                                                         |");		writer.newLine();
			writer.write("#| ._____________________________________________________. |");		writer.newLine();
			writer.write("#|'      l    /\\ /     \\\\            \\ /\\   l             `|");	writer.newLine();
			writer.write("#*       l  /   V       ))            V   \\ l              *");		writer.newLine();
			writer.write("#        l/            //                  \\I");							writer.newLine();
			writer.write("#                      V");												writer.newLine();
			
			writer.newLine(); // new line
			
			writer.write("############################################################"); writer.newLine();
			writer.write("# Here you can enable or disable the point of \"no return\"  #"); writer.newLine();
			writer.write("#  which means the point at which even if the player count #"); writer.newLine();
			writer.write("#  drops below the minimum, the game will still continue.  #"); writer.newLine();
			writer.write("# The point is set in seconds. The point of no return will #"); writer.newLine();
			writer.write("#               be enabled after that point.               #"); writer.newLine();
			writer.write("############################################################"); writer.newLine();
			
			writer.newLine(); // new line
			
			writer.write("No-Return-Point:"); writer.newLine();
			writer.write("    enabled: " + true); writer.newLine();
			writer.write("    seconds: " + 300); writer.newLine();
			
			writer.newLine(); /// new line
			
			writer.write("############################################################"); writer.newLine();
			writer.write("#    Here you can enable or disable spectators in a game   #"); writer.newLine();
			writer.write("#   If you enable them, you can set the limit on how many  #"); writer.newLine();
			writer.write("#  spectators are allowed to be in a game at one point in  #"); writer.newLine();
			writer.write("#      time. To disable the limit, just set it to -1       #"); writer.newLine();
			writer.write("############################################################"); writer.newLine();
			
			writer.newLine(); // new line
			
			writer.write("Spectators:"); writer.newLine();
			writer.write("    enabled: " + true); writer.newLine();
			writer.write("    limit: " + -1); writer.newLine();
			
			writer.newLine(); // new line
			
			writer.write("############################################################"); writer.newLine();
			writer.write("#  This next option is for enabling or disabling commands  #"); writer.newLine();
			writer.write("# for players who are in an arena. If you disable commands #"); writer.newLine();
			writer.write("# in arenas, you have the option to allow some. If you do  #"); writer.newLine();
			writer.write("#  not want any allowed commands, just leave the allowed   #"); writer.newLine();
			writer.write("#                    commands empty                        #"); writer.newLine();
			writer.write("############################################################"); writer.newLine();
			
			writer.newLine(); // new line
			
			writer.write("Commands:"); writer.newLine();
			writer.write("    allowed: " + false); writer.newLine();
			writer.write("    bypassed-commands:"); writer.newLine();
			writer.write("      - me"); writer.newLine();
			writer.write("      - msg"); writer.newLine();
			writer.write("      - r"); writer.newLine();
			writer.write("      - tell"); writer.newLine();
			writer.write("      - hgarena"); writer.newLine();
			
			writer.newLine(); // new line
			
			writer.write("############################################################"); writer.newLine();
			writer.write("# This option chooses if players are struck by lightning or #"); writer.newLine();
			writer.write("#                           not                             #"); writer.newLine();
			writer.write("############################################################"); writer.newLine();
			
			writer.newLine(); // new line
			
			writer.write("Lightning:"); writer.newLine();
			writer.write("    enabled: " + true); writer.newLine();
			
			writer.newLine(); // new line
			
			writer.write("############################################################"); writer.newLine();
			writer.write("# The next option is for enabling/disabling the arena rep #"); writer.newLine();
			writer.write("#  system. It is also possible to set the default rep here. #"); writer.newLine();
			writer.write("# The 3rd option has to do with how many seconds a player  #"); writer.newLine();
			writer.write("#  must have been in the arena for them to earn a positive  #"); writer.newLine();
			writer.write("#                    reputation point.                      #"); writer.newLine();
			writer.write("############################################################"); writer.newLine();
			
			writer.newLine(); // new line
			
			writer.write("Reputation:"); writer.newLine();
			writer.write("    enabled: " + true); writer.newLine();
			writer.write("    base-reputation: " + 0); writer.newLine();
			writer.write("    minimum-rep-add: " + 120); writer.newLine();
			writer.write("    broadcast-minus-rep: " + true); writer.newLine();
			
			writer.newLine(); // new line
			
			writer.write("############################################################"); writer.newLine();
			writer.write("#  This next option is for enabling/disabling the arena's  #"); writer.newLine();
			writer.write("# border system.. Also at what rate the border closes in.  #"); writer.newLine();
			writer.write("#  You set this rate by the amount of ticks it takes for   #"); writer.newLine();
			writer.write("#  it to close in the set amount. Each arena tick happens  #"); writer.newLine();
			writer.write("#      every 1 second (approximately). Set accordingly     #"); writer.newLine();
			writer.write("############################################################"); writer.newLine();
			
			writer.newLine(); // new line
			
			writer.write("Border:"); writer.newLine();
			writer.write("    enabled: " + true); writer.newLine();
			writer.write("    tick-delay: " + 40); writer.newLine();
			writer.write("    decrement-amount: " + 1.0); writer.newLine();
			writer.write("    floor: " + 50); writer.newLine();
			
			// TODO
			
			// closing the writer
			writer.close();
			fWriter.close();
			
			// loading the values
			this.loadValues(configLocation);
			
		} catch (IOException e) {
			
			e.printStackTrace();
			SurvivalGames.logger().logMessage(Language.CONFIG_FILE_ERROR.toString() + e.getMessage());
			
		}
		
	}
	
	private void loadValues(File toLoad) {
		
		FileConfiguration config = plugin.getConfig();
		
		try {
			
			// load our "custom" config file
			config.load(toLoad);
			
			// loading all the values
			Values.USE_NO_RETURN = config.getBoolean("No-Return-Point.enabled", Values.USE_NO_RETURN);
			Values.NO_RETURN_SECONDS = config.getInt("No-Return-Point.seconds", Values.NO_RETURN_SECONDS);
			Values.ALLOW_SPECTATORS = config.getBoolean("Spectators.enabled", Values.ALLOW_SPECTATORS);
			Values.SPECTATOR_LIMIT = config.getInt("Spectators.limit", Values.SPECTATOR_LIMIT);
			Values.ALLOW_COMMANDS = config.getBoolean("Commands.allowed", Values.ALLOW_COMMANDS);
			Values.BYPASSING_COMMANDS = config.getStringList("Commands.bypassed-commands");
			Values.LIGHTNING_ENABLED = config.getBoolean("Lightning.enabled", Values.LIGHTNING_ENABLED);
			Values.REPUTATION_ENABLED = config.getBoolean("Reputation.enabled", Values.REPUTATION_ENABLED);
			Values.DEFAULT_REPUTATION = config.getInt("Reputation.base-reputation", Values.DEFAULT_REPUTATION);
			Values.MINIMUM_REP_ADD = config.getInt("Reputation.minimum-rep-add", Values.MINIMUM_REP_ADD);
			Values.BROADCAST_MINUS_REP = config.getBoolean("Reputation.broadcast-minus-rep", Values.BROADCAST_MINUS_REP);
			Values.BORDER_ENABLED = config.getBoolean("Border.enabled", Values.BORDER_ENABLED);
			Values.BORDER_TICK_DELAY = config.getInt("Border.tick-delay", Values.BORDER_TICK_DELAY);
			Values.BORDER_FLOOR = config.getInt("Border.floor", Values.BORDER_FLOOR);
			
		} catch (Exception e) {

			e.printStackTrace();
		
			SurvivalGames.logger().logMessage(Language.CONFIG_FILE_ERROR.toString());
			SurvivalGames.logger().logMessage(Language.USING_DEFAULT_VALUES.toString());
			
		}
				
	}
	
	public void reloadValues() {
		
		File configLocation = new File(SurvivalGames.getPluginName() + "/config.yml");
		
		// reloading the config
		plugin.reloadConfig();
		
		// loading the values
		this.loadValues(configLocation);
		
	}
	
}
